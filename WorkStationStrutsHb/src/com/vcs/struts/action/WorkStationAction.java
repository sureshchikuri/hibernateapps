/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.vcs.struts.action;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.MappingDispatchAction;

import com.sun.org.apache.commons.beanutils.BeanUtils;
import com.vcs.hibernate.Floor;
import com.vcs.hibernate.Workstation;
import com.vcs.hibernate.Workstationlov;
import com.vcs.hibernate.Zone;
import com.vcs.service.ServiceFactory;
import com.vcs.service.WorkStationService;
import com.vcs.struts.form.WorkStationForm;


public class WorkStationAction extends MappingDispatchAction {
	
	public ActionForward display(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		WorkStationForm workStationForm = (WorkStationForm) form;
		Workstationlov workstationlov=new Workstationlov();

		Zone zone=new Zone();
		WorkStationService workStationService=ServiceFactory.getWorkStationService();
		
		List typeList=null;
		List floorIdList=null;
		
		floorIdList=workStationService.getFloorIdList(zone);
		
		typeList=workStationService.getTypeList(workstationlov);
		
		HttpSession hsession=request.getSession();
		hsession.setAttribute("floorIdList", floorIdList);
		hsession.setAttribute("typeList", typeList);
		System.out.println(floorIdList);
		
		return mapping.findForward("success");
	}
	
	public ActionForward ajaxCreate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		WorkStationForm workStationForm = (WorkStationForm) form;
		Zone zone=new Zone(); 
		
		WorkStationService workStationService=ServiceFactory.getWorkStationService();
		
		String zoneIdList=null;
		zoneIdList=workStationService.getZoneIdList(zone);
		response.getWriter().write(zoneIdList);
		
		return null;
	}
	public ActionForward create(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException {
		WorkStationForm workStationForm = (WorkStationForm) form;
		Workstation workstation=new Workstation();
		WorkStationService workStationService=ServiceFactory.getWorkStationService();
		Zone zone=new Zone();
		Floor floor=new Floor();
		
		String status=null;
		
		BeanUtils.copyProperties(workstation, workStationForm);
		
		status=workStationService.create(workstation);
		
		return mapping.findForward("success");
	}
	
	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		WorkStationForm workStationForm = (WorkStationForm) form;
		Workstation workstation=new Workstation();
		WorkStationService workStationService=ServiceFactory.getWorkStationService();
		
		List workstationSearchList=null;
		workstationSearchList=workStationService.search(workstation);
		
		request.setAttribute("workstationSearchList", workstationSearchList);
		System.out.println(workstationSearchList);
		
		return mapping.findForward("success");
	}
}